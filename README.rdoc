= ZeRuRa

Базовый пример. Каркас сайта.


==Основные моменты:
* подключены jquery и zelder.library и прочие
* простое добавление скриптов и стилей (widget) и их подключение
* прямые запросы в базу


==Работа с базой (PG)
- Необходимо в конфиге <tt>config/database.yml</tt> прописать подключение к базе, пример:
 some_raw_data:
  adapter: postgresql
  encoding: utf8
  database: zebase
  port: 5433
  username: postgres
  password: pass
  host: 127.0.0.1
- В коде создать <tt>клиент</tt> наследующий <tt>lib/datalayer/baseclient.rb</tt>, пример класс в <tt>lib/clients/zeho_client.rb</tt>. 
- В клиенте выполнить инициализацию конфига:
 init('some_raw_data')
- Выполнить запрос вызвав <tt>raw_sql(sql, onError)</tt>. Второй параметр необязательный - функция при ошибке запроса.

Пример использования готового клиента <tt>app/models/zeho.rb</tt>

Важно! В запросе все названия таблиц и полей должны быть обернуты в кавычки.


==Оформление страниц (SEO)
В методе действия указать заголовок страницы и метатеги:
 set_title(t('articles_headers_title'))
 set_headers(t('articles_headers_keyword'), t('articles_headers_desc'))
Текст, как правило из файла локализации <tt>config/locales/ru.yml</tt>


==Работа со скриптами и контентом
Проект уже подключает jquery и прочие библиотеки. Дополнительные кладутся в папку <tt>assets/javascript/widgets</tt> и подключаются в контроллере методом
 add_js("zerura") //- путь без указания 'widgets/'
Пример скрипта, с использованием библиотек <tt>widgets/zerura.js</tt>.

Дополнительные скрипты, общие на весь сайт, кладутся в папку <tt>assets/javascript/modules/src</tt> - они будут автоматически подключены на всех страницах сайта.

Внешние модули скрипты и прочие, как правило кладутся в <tt>lib/assets/javascript</tt> и прописываются для прекомпилятора в файле настройках <tt>config/environments/production.rb</tt>.

Для подключения на всех страницах, прописать на мастер странице сайта <tt>views/layouts/application.html.erb</tt>:
 <%= javascript_include_tag 	"testlib" %>  
Для подключения в конкретном действии:
 add_js("testlib", true)


==Отладка
Принципы отладки приложения
===отладка контролов:
в action передать в метод <tt>to_d</tt> любой объект, например:
 to_d({ 
  val1: 'this is just value of the object',
  val2: 'another one',
  obj1: { obj_p1: 'inner val'}
  })
внизу страницы будет выведен дампинг объекта
===отладка скриптов:
в адресной cтроке передать параметр <tt>_jsd=1</tt>, например 
 http://zedk.ru/shcoder?_jsd=1
При этом будет включен вывод отладочной информации, что была вызвана методами <tt>zedk.Debug</tt>, <tt>zedk.DebugMsg</tt>, <tt>zedk.DebugError</tt>.
В режиме development отладочный вывод всегда включен.


